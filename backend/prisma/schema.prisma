generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  fullName        String
  phone           String?
  role            Role     @default(WORKER)
  bio             String?
  avatar          String?
  resetToken      String?
  agreedToTerms   Boolean  @default(false)
  agreedToPrivacy Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  promoRegistration PromoRegistration?
  promoCodes        PromoCode[]
  applications      Application[]

  @@map("users")
}

enum Role {
  ADMIN
  MANAGER
  WORKER
}

model PromoCode {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  usedCount   Int      @default(0)

  registrations PromoRegistration[]

  @@map("promo_codes")
}

model PromoRegistration {
  id           String    @id @default(uuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCodeId  String
  promoCode    PromoCode @relation(fields: [promoCodeId], references: [id])
  registeredAt DateTime  @default(now())

  @@map("promo_registrations")
}

model Enterprise {
  id          String   @id @default(uuid())
  name        String
  description String?
  location    String
  contactInfo Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  jobs Job[]

  @@map("enterprises")
}

model Job {
  id             String     @id @default(uuid())
  enterpriseId   String
  enterprise     Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  title          String
  description    String
  requirements   String
  salaryMin      Int?
  salaryMax      Int?
  workConditions String?
  location       String
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  applications Application[]

  @@map("jobs")
}

model Application {
  id          String            @id @default(uuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId       String
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  status      ApplicationStatus @default(APPLIED)
  appliedAt   DateTime          @default(now())
  workEndDate DateTime?

  @@unique([userId, jobId])
  @@index([userId])
  @@index([jobId])
  @@map("applications")
}

enum ApplicationStatus {
  APPLIED
  APPROVED
  REJECTED
  REMOVED
  DONE
}
