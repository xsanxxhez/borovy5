generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  WORKER
  MANAGER
  ADMIN
}

enum ApplicationStatus {
  APPLIED
  APPROVED
  REJECTED
  REMOVED
  DONE
}

model User {
  id                  String              @id @default(uuid())
  email               String              @unique
  password            String
  fullName            String
  phone               String
  role                Role
  avatar              String?
  bio                 String?
  socialLinks         Json?
  agreedToTerms       Boolean             @default(false)
  agreedToPrivacy     Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  applications        Application[]
  promoCodes          PromoCode[]         @relation("CreatedPromoCodes")
  promoRegistration   PromoRegistration?
  resetToken          String?
  resetTokenExpiry    DateTime?

  @@map("users")
}

model Enterprise {
  id              String    @id @default(uuid())
  name            String
  description     String?
  location        String
  contactInfo     Json?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  jobs            Job[]

  @@map("enterprises")
}

model Job {
  id              String    @id @default(uuid())
  enterpriseId    String
  enterprise      Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Restrict)
  
  title           String
  description     String
  requirements    String?
  salaryMin       Int?
  salaryMax       Int?
  workConditions  String?
  location        String
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  applications    Application[]

  @@map("jobs")
}

model Application {
  id              String              @id @default(uuid())
  jobId           String
  job             Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  status          ApplicationStatus   @default(APPLIED)
  appliedAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  workEndDate     DateTime?

  @@unique([jobId, userId])
  @@map("applications")
}

model PromoCode {
  id              String              @id @default(uuid())
  code            String              @unique
  description     String?
  isActive        Boolean             @default(true)
  createdBy       String
  creator         User                @relation("CreatedPromoCodes", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt       DateTime            @default(now())
  
  registrations   PromoRegistration[]

  @@map("promo_codes")
}

model PromoRegistration {
  id              String    @id @default(uuid())
  promoCodeId     String
  promoCode       PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  registeredAt    DateTime  @default(now())

  @@map("promo_registrations")
}
