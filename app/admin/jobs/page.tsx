"use client";

import { useEffect, useState } from "react";
import { api } from "@/lib/api";
import Card from "@/components/ui/Card";
import Button from "@/components/ui/Button";

export default function AdminJobs() {
  const [jobs, setJobs] = useState<any[]>([]);
  const [enterprises, setEnterprises] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [form, setForm] = useState({
    enterpriseId: "",
    title: "",
    description: "",
    requirements: "",
    salaryMin: "",
    salaryMax: "",
    workConditions: "",
    location: "",
  });

  useEffect(() => {
    loadData();
  }, []);

  async function loadData() {
    try {
      const [jobsData, enterprisesData] = await Promise.all([
        api("/jobs/admin/all"),
        api("/enterprises")
      ]);
      setJobs(jobsData);
      setEnterprises(enterprisesData);
    } catch (error) {
      console.error(error);
    } finally {
      setLoading(false);
    }
  }

  async function handleCreate() {
    try {
      await api("/jobs", {
        method: "POST",
        body: JSON.stringify({
          ...form,
          salaryMin: parseInt(form.salaryMin),
          salaryMax: parseInt(form.salaryMax),
        }),
      });
      setForm({
        enterpriseId: "",
        title: "",
        description: "",
        requirements: "",
        salaryMin: "",
        salaryMax: "",
        workConditions: "",
        location: "",
      });
      setShowForm(false);
      loadData();
      alert("üöÄ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!");
    } catch (error: any) {
      alert("‚ùå " + error.message);
    }
  }

  async function handleDelete(id: string) {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é?")) return;
    try {
      await api(`/jobs/${id}`, { method: "DELETE" });
      loadData();
      alert("üóëÔ∏è –í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞!");
    } catch (error: any) {
      alert(error.message);
    }
  }

  async function toggleActive(id: string) {
    try {
      await api(`/jobs/${id}/toggle-active`, { method: "PATCH" });
      loadData();
    } catch (error: any) {
      alert(error.message);
    }
  }

  if (loading) return <div className="text-center py-20">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div className="animate-fadeIn">
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-4xl font-black mb-2 gradient-text">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏</h1>
          <p className="text-zinc-400">–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {jobs.length}</p>
        </div>
        <Button onClick={() => setShowForm(!showForm)} icon={showForm ? "‚ùå" : "‚ûï"}>
          {showForm ? "–û—Ç–º–µ–Ω–∞" : "–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"}
        </Button>
      </div>

      {showForm && (
        <Card className="mb-6 border-2 border-green-600">
          <h3 className="text-2xl font-bold mb-6">üöÄ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-bold text-zinc-400 mb-2 uppercase tracking-wider">–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ</label>
              <select
                value={form.enterpriseId}
                onChange={(e) => setForm({ ...form, enterpriseId: e.target.value })}
                className="w-full px-4 py-3 rounded-lg border-2 border-zinc-700 bg-zinc-900 text-white focus:border-green-600 focus:outline-none transition-all"
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ</option>
                {enterprises.map(e => (
                  <option key={e.id} value={e.id}>{e.name}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-bold text-zinc-400 mb-2 uppercase tracking-wider">–î–æ–ª–∂–Ω–æ—Å—Ç—å</label>
              <input
                className="w-full px-4 py-3 rounded-lg border-2 border-zinc-700 bg-zinc-900 text-white focus:border-green-600 focus:outline-none transition-all"
                placeholder="–ì–æ—Ä–Ω–æ—Ä–∞–±–æ—á–∏–π, –ú–∞—à–∏–Ω–∏—Å—Ç..."
                value={form.title}
                onChange={(e) => setForm({ ...form, title: e.target.value })}
                required
              />
            </div>
          </div>

          <div className="mb-4">
            <label className="block text-sm font-bold text-zinc-400 mb-2 uppercase tracking-wider">–û–ø–∏—Å–∞–Ω–∏–µ</label>
            <textarea
              className="w-full px-4 py-3 rounded-lg border-2 border-zinc-700 bg-zinc-900 text-white focus:border-green-600 focus:outline-none transition-all resize-none"
              rows={4}
              placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏..."
              value={form.description}
              onChange={(e) => setForm({ ...form, description: e.target.value })}
              required
            />
          </div>

          <div className="mb-4">
            <label className="block text-sm font-bold text-zinc-400 mb-2 uppercase tracking-wider">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</label>
            <textarea
              className="w-full px-4 py-3 rounded-lg border-2 border-zinc-700 bg-zinc-900 text-white focus:border-green-600 focus:outline-none transition-all resize-none"
              rows={3}
              placeholder="–û–ø—ã—Ç, –Ω–∞–≤—ã–∫–∏, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..."
              value={form.requirements}
              onChange={(e) => setForm({ ...form, requirements: e.target.value })}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-bold text-zinc-400 mb-2 uppercase tracking-wider">–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç (‚ÇΩ)</label>
              <input
                type="number"
                className="w-full px-4 py-3 rounded-lg border-2 border-zinc-700 bg-zinc-900 text-white focus:border-green-600 focus:outline-none transition-all"
                placeholder="50000"
                value={form.salaryMin}
                onChange={(e) => setForm({ ...form, salaryMin: e.target.value })}
              />
            </div>

            <div>
              <label className="block text-sm font-bold text-zinc-400 mb-2 uppercase tracking-wider">–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ (‚ÇΩ)</label>
              <input
                type="number"
                className="w-full px-4 py-3 rounded-lg border-2 border-zinc-700 bg-zinc-900 text-white focus:border-green-600 focus:outline-none transition-all"
                placeholder="100000"
                value={form.salaryMax}
                onChange={(e) => setForm({ ...form, salaryMax: e.target.value })}
              />
            </div>
          </div>

          <div className="mb-4">
            <label className="block text-sm font-bold text-zinc-400 mb-2 uppercase tracking-wider">–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</label>
            <input
              className="w-full px-4 py-3 rounded-lg border-2 border-zinc-700 bg-zinc-900 text-white focus:border-green-600 focus:outline-none transition-all"
              placeholder="–í–∞—Ö—Ç–∞ 30/30, –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ..."
              value={form.workConditions}
              onChange={(e) => setForm({ ...form, workConditions: e.target.value })}
            />
          </div>

          <div className="mb-6">
            <label className="block text-sm font-bold text-zinc-400 mb-2 uppercase tracking-wider">–õ–æ–∫–∞—Ü–∏—è</label>
            <input
              className="w-full px-4 py-3 rounded-lg border-2 border-zinc-700 bg-zinc-900 text-white focus:border-green-600 focus:outline-none transition-all"
              placeholder="–ù–æ—Ä–∏–ª—å—Å–∫, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π"
              value={form.location}
              onChange={(e) => setForm({ ...form, location: e.target.value })}
              required
            />
          </div>

          <Button onClick={handleCreate} icon="üöÄ" className="w-full">
            –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
          </Button>
        </Card>
      )}

      <div className="space-y-4">
        {jobs.map((job) => (
          <Card key={job.id} className={`border-l-4 ${job.isActive ? 'border-l-green-600' : 'border-l-red-600'}`}>
            <div className="flex items-start justify-between gap-4">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-3">
                  <h3 className="text-2xl font-black">{job.title}</h3>
                  <button
                    onClick={() => toggleActive(job.id)}
                    className={`px-3 py-1 rounded-full text-xs font-bold ${
                      job.isActive 
                        ? 'bg-green-600/20 border border-green-600 text-green-400' 
                        : 'bg-red-600/20 border border-red-600 text-red-400'
                    }`}
                  >
                    {job.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                  </button>
                </div>

                <p className="text-zinc-400 text-sm mb-2">üè¢ {job.enterprise?.name}</p>
                <p className="text-zinc-300 mb-3">{job.description}</p>

                <div className="flex flex-wrap gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <span>üí∞</span>
                    <span className="font-semibold text-green-400">
                      {job.salaryMin?.toLocaleString()} - {job.salaryMax?.toLocaleString()} ‚ÇΩ
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span>üìç</span>
                    <span>{job.location}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span>üìä</span>
                    <span>{job._count?.applications || 0} –æ—Ç–∫–ª–∏–∫–æ–≤</span>
                  </div>
                </div>
              </div>

              <div className="flex gap-2">
                <Button variant="danger" onClick={() => handleDelete(job.id)}>
                  üóëÔ∏è
                </Button>
              </div>
            </div>
          </Card>
        ))}
      </div>
    </div>
  );
}
